[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "python-cheatsheet-lib"
version = "0.1.0"
description = "An interactive, example-driven cheat sheet for advanced Python concepts, emphasizing Python 3.13+ features, OOP, functional paradigms, design patterns, and metaprogramming"
readme = "README.md"
requires-python = ">=3.13"
license = {text = "MIT"}
authors = [
    {name = "Python Cheatsheet Contributors"}
]
keywords = [
    "python",
    "cheatsheet",
    "design-patterns",
    "metaprogramming",
    "python-313",
    "oop",
    "functional-programming",
    "education"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Education",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]
dependencies = []

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "ruff>=0.3.0",
    "black>=24.0.0",
    "mypy>=1.9.0",
    "pre-commit>=3.6.0",
]
docs = [
    "sphinx>=7.2.0",
    "sphinx-rtd-theme>=2.0.0",
    "jupyter>=1.0.0",
    "nbsphinx>=0.9.0",
]
async = [
    "trio>=0.24.0",
    "anyio>=4.2.0",
]

[project.urls]
Homepage = "https://github.com/python-cheatsheet-lib/python-cheatsheet-lib"
Documentation = "https://python-cheatsheet-lib.readthedocs.io"
Repository = "https://github.com/python-cheatsheet-lib/python-cheatsheet-lib"
Issues = "https://github.com/python-cheatsheet-lib/python-cheatsheet-lib/issues"

[project.scripts]
cheatsheet-run = "python_cheatsheet_lib.core.runner:main"

[tool.hatch.build.targets.wheel]
packages = ["src/python_cheatsheet_lib"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/README.md",
    "/LICENSE",
    "/pyproject.toml",
]

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q --strict-markers --cov=python_cheatsheet_lib --cov-report=term-missing"
testpaths = ["tests"]
pythonpath = ["src"]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/examples/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]

[tool.black]
line-length = 100
target-version = ["py313"]
include = '\.pyi?$'

[tool.ruff]
line-length = 100
target-version = "py313"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C",   # flake8-comprehensions
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # unused imports in __init__.py

[tool.mypy]
python_version = "3.13"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

